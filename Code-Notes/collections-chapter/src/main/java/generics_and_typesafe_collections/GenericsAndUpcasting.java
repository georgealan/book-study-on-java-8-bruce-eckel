package generics_and_typesafe_collections;

import java.util.ArrayList;

/*
You are not limited to putting the exact type of object into a collection when you
specify that type as a generic parameter. Upcasting works the same with generics as
it does with other types:
 */

class GrannySmith extends Apple {}
class Gala extends Apple {}
class Fuji extends Apple {}
class Braeburn extends Apple {}


public class GenericsAndUpcasting {
    public static void main(String[] args) {
        ArrayList<Apple> apples = new ArrayList<>();

        apples.add(new GrannySmith());
        apples.add(new Gala());
        apples.add(new Fuji());
        apples.add(new Braeburn());

        for (Apple apple : apples) {
            System.out.println(apple);
        }
    }

    /*
    Thus, you can add a subtype of Apple to a collection specified to hold Apple objects.
    The output is produced from the default toString() method of Object, which
    prints the class name followed by the unsigned hexadecimal representation of the
    hash code of the object (generated by the hashCode() method).
     */
}
